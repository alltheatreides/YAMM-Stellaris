@SL_SPAWN_BASE_INTERVAL       = 120
@SL_SPAWN_BASE_INTERVAL_HALF  = 60
@SL_SPAWN_CHECK_INTERVAL      = 30
@SL_SPAWN_MAX_RANDOMNESS      = 28		
@SL_MAX_FLEETS                = 3
@SL_DESTROYED_SHIP_PENALTY    = 5

namespace = SGM_SL_event

#Supply line ID management
#Calls are skipped depending on timed_flag "SL_spawn_inactive".
country_event = {
	id = SGM_SL_event.1
	hide_window = yes
	
	trigger = {
		has_country_flag=SL_ENABLE		
		NOT={has_country_flag=SL_spawn_inactive}
	}	
		
	immediate = {
	
		#log="Executing ID management for [This.GetName]"
		set_timed_country_flag={flag=SL_spawn_inactive days=@SL_SPAWN_CHECK_INTERVAL }
		save_event_target_as = SL_country				
		SGM_country2corps=yes #save_event_target_as=SL_corps

		event_target:SL_corps={
		
			if={limit={NOT={has_country_flag=SL_fleet_count_initialized}}
				#MARKER:SUPPLY_LINE_NUMBER
				set_variable={which=SL_01_fleet_count value=0} 
				set_variable={which=SL_02_fleet_count value=0}
				set_variable={which=SL_03_fleet_count value=0}
				set_variable={which=SL_04_fleet_count value=0}
				set_variable={which=SL_05_fleet_count value=0}
				set_variable={which=SL_06_fleet_count value=0}
				set_variable={which=SL_07_fleet_count value=0}
				set_variable={which=SL_08_fleet_count value=0}
				set_variable={which=SL_09_fleet_count value=0}
				set_variable={which=SL_10_fleet_count value=0}
				
				set_variable={which=SL_01_time_until_spawn value=30} #log="TTS 10"
				set_variable={which=SL_02_time_until_spawn value=60}
				set_variable={which=SL_03_time_until_spawn value=90}
				set_variable={which=SL_04_time_until_spawn value=40}
				set_variable={which=SL_05_time_until_spawn value=70}
				set_variable={which=SL_06_time_until_spawn value=100}
				set_variable={which=SL_07_time_until_spawn value=20}
				set_variable={which=SL_08_time_until_spawn value=50}
				set_variable={which=SL_09_time_until_spawn value=80}
				set_variable={which=SL_10_time_until_spawn value=60}
				
				set_country_flag=SL_fleet_count_initialized
				
				event_target:SL_country={
					set_variable={which=SL_mineral_demand value=0}
				}
			}
	
			if={limit={
					OR={
						check_variable={which=SL_01_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
						check_variable={which=SL_02_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
						check_variable={which=SL_03_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
						check_variable={which=SL_04_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
						check_variable={which=SL_05_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
						check_variable={which=SL_06_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
						check_variable={which=SL_07_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
						check_variable={which=SL_08_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
						check_variable={which=SL_09_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
						check_variable={which=SL_10_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}
					}
				}
				#log="[This.GetName] detected need to spawn at least one supply fleet"
				
				set_country_flag=SL_01_available
				set_country_flag=SL_02_available
				set_country_flag=SL_03_available
				set_country_flag=SL_04_available
				set_country_flag=SL_05_available
				set_country_flag=SL_06_available
				set_country_flag=SL_07_available
				set_country_flag=SL_08_available
				set_country_flag=SL_09_available
				set_country_flag=SL_10_available
				
				#Get number of active military fleets
				event_target:SL_country={
			
					set_variable={which=SL_num_active_military_fleets value=0}			
							
					every_owned_fleet = {
						limit={
							is_ship_class = shipclass_military
							NOT={has_fleet_flag=SL_docked_at_friendly_spaceport}
						}
						owner={change_variable={which=SL_num_active_military_fleets value=1}}
					}			
				
					#If there are too many active fleets, determine which ones do not need supply lines
					if={limit={check_variable={which=SL_num_active_military_fleets value > 10}}
						#log="Detected more than 10 active military fleets for [This.GetName]"
						save_event_target_as=SGM_result_scope
						SGM_country_get_max_naval_capacity=yes
						every_owned_fleet = {
							limit = {
								is_ship_class = shipclass_military
								NOT={has_fleet_flag=SL_docked_at_friendly_spaceport}
							}
							owner={save_event_target_as=SGM_result_scope}
							SGM_fleet_get_fleet_size = yes
							owner={
								set_variable={which=SL_fleet_size_ratio value=SGM_fleet_size}
								divide_variable = {which=SL_fleet_size_ratio value=SGM_max_naval_capacity}
								if={limit={check_variable={which=SL_fleet_size_ratio value < 0.1}}
									prev={
										set_timed_fleet_flag={flag=SL_ignore_fleet days=@SL_SPAWN_CHECK_INTERVAL}
										#MARKER:SUPPLY_LINE_NUMBER
										remove_fleet_flag = SL_consumer
										remove_fleet_flag = SL_01_consumer
										remove_fleet_flag = SL_02_consumer
										remove_fleet_flag = SL_03_consumer
										remove_fleet_flag = SL_04_consumer
										remove_fleet_flag = SL_05_consumer
										remove_fleet_flag = SL_06_consumer
										remove_fleet_flag = SL_07_consumer
										remove_fleet_flag = SL_08_consumer
										remove_fleet_flag = SL_09_consumer
										remove_fleet_flag = SL_10_consumer
									}
								}
							}
						}
					}
				
					#Determine which supply lines are in use
					every_owned_fleet = {
						limit = {
							is_ship_class = shipclass_military
						}
						switch = {
							trigger = has_fleet_flag
							#MARKER:SUPPLY_LINE_NUMBER
							SL_01_consumer = { event_target:SL_corps={remove_country_flag=SL_01_available} save_event_target_as=SL_01_consumer}
							SL_02_consumer = { event_target:SL_corps={remove_country_flag=SL_02_available} save_event_target_as=SL_02_consumer}
							SL_03_consumer = { event_target:SL_corps={remove_country_flag=SL_03_available} save_event_target_as=SL_03_consumer}
							SL_04_consumer = { event_target:SL_corps={remove_country_flag=SL_04_available} save_event_target_as=SL_04_consumer}
							SL_05_consumer = { event_target:SL_corps={remove_country_flag=SL_05_available} save_event_target_as=SL_05_consumer}
							SL_06_consumer = { event_target:SL_corps={remove_country_flag=SL_06_available} save_event_target_as=SL_06_consumer}
							SL_07_consumer = { event_target:SL_corps={remove_country_flag=SL_07_available} save_event_target_as=SL_07_consumer}
							SL_08_consumer = { event_target:SL_corps={remove_country_flag=SL_08_available} save_event_target_as=SL_08_consumer}
							SL_09_consumer = { event_target:SL_corps={remove_country_flag=SL_09_available} save_event_target_as=SL_09_consumer}
							SL_10_consumer = { event_target:SL_corps={remove_country_flag=SL_10_available} save_event_target_as=SL_10_consumer}
							default = { }
						}
					}
				
					#Give all newly found valid fleets the lowest possible unique consumer ID
					every_owned_fleet = {
						limit = {
							is_ship_class = shipclass_military
							NOT={has_fleet_flag=SL_docked_at_friendly_spaceport}
							NOT={has_fleet_flag=SL_consumer}
							NOT={has_fleet_flag=SL_ignore_fleet}	
						}
						#log="Detected new consumer fleet [This.GetName]-[Prev.GetName]"
						
						event_target:SL_corps={
							switch = {
								trigger = has_country_flag
								#MARKER:SUPPLY_LINE_NUMBER
								SL_01_available = { remove_country_flag=SL_01_available set_variable={which=SL_01_time_until_spawn value = 30}  prev={set_fleet_flag=SL_01_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_01_consumer}}
								SL_02_available = { remove_country_flag=SL_02_available set_variable={which=SL_02_time_until_spawn value = 60}  prev={set_fleet_flag=SL_02_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_02_consumer}}
								SL_03_available = { remove_country_flag=SL_03_available set_variable={which=SL_03_time_until_spawn value = 90}  prev={set_fleet_flag=SL_03_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_03_consumer}}
								SL_04_available = { remove_country_flag=SL_04_available set_variable={which=SL_04_time_until_spawn value = 40}  prev={set_fleet_flag=SL_04_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_04_consumer}}
								SL_05_available = { remove_country_flag=SL_05_available set_variable={which=SL_05_time_until_spawn value = 70}  prev={set_fleet_flag=SL_05_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_05_consumer}}
								SL_06_available = { remove_country_flag=SL_06_available set_variable={which=SL_06_time_until_spawn value = 100} prev={set_fleet_flag=SL_06_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_06_consumer}}
								SL_07_available = { remove_country_flag=SL_07_available set_variable={which=SL_07_time_until_spawn value = 20}  prev={set_fleet_flag=SL_07_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_07_consumer}}
								SL_08_available = { remove_country_flag=SL_08_available set_variable={which=SL_08_time_until_spawn value = 50}  prev={set_fleet_flag=SL_08_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_08_consumer}}
								SL_09_available = { remove_country_flag=SL_09_available set_variable={which=SL_09_time_until_spawn value = 80}  prev={set_fleet_flag=SL_09_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_09_consumer}}
								SL_10_available = { remove_country_flag=SL_10_available set_variable={which=SL_10_time_until_spawn value = 60}  prev={set_fleet_flag=SL_10_consumer set_fleet_flag=SL_consumer save_event_target_as=SL_10_consumer}}
								default = {} 
							}
						}						
					}
				}
			
				#if={limit={check_variable={which=SL_01_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL}} log="TTS OK"}
				#if={limit={check_variable={which=SL_01_fleet_count value < @SL_MAX_FLEETS}} log="Fleet count OK"}
				#if={limit={NOT={has_country_flag=SL_01_available}} log="Available flag OK"}
				#if={limit={exists=event_target:SL_01_consumer} log="consumer OK"}
				
				#Check spawn conditions			
				if={limit={check_variable={which=SL_01_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_01_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_01_available}} event_target:SL_01_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}
				if={limit={check_variable={which=SL_02_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_02_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_02_available}} event_target:SL_02_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}
				if={limit={check_variable={which=SL_03_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_03_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_03_available}} event_target:SL_03_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}
				if={limit={check_variable={which=SL_04_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_04_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_04_available}} event_target:SL_04_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}
				if={limit={check_variable={which=SL_05_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_05_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_05_available}} event_target:SL_05_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}
				if={limit={check_variable={which=SL_06_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_06_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_06_available}} event_target:SL_06_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}
				if={limit={check_variable={which=SL_07_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_07_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_07_available}} event_target:SL_07_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}
				if={limit={check_variable={which=SL_08_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_08_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_08_available}} event_target:SL_08_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}
				if={limit={check_variable={which=SL_09_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_09_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_09_available}} event_target:SL_09_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}
				if={limit={check_variable={which=SL_10_time_until_spawn value < @SL_SPAWN_CHECK_INTERVAL} check_variable={which=SL_10_fleet_count value < @SL_MAX_FLEETS} NOT={has_country_flag=SL_10_available}} event_target:SL_10_consumer={fleet_event = {id = SGM_SL_event.11 days=1 random=28}}}		
			}
			if={limit={check_variable={which=SL_01_time_until_spawn value > 0}} change_variable={which=SL_01_time_until_spawn value = -30}} #@SL_SPAWN_CHECK_INTERVAL
			if={limit={check_variable={which=SL_02_time_until_spawn value > 0}} change_variable={which=SL_02_time_until_spawn value = -30}}
			if={limit={check_variable={which=SL_03_time_until_spawn value > 0}} change_variable={which=SL_03_time_until_spawn value = -30}}
			if={limit={check_variable={which=SL_04_time_until_spawn value > 0}} change_variable={which=SL_04_time_until_spawn value = -30}}
			if={limit={check_variable={which=SL_05_time_until_spawn value > 0}} change_variable={which=SL_05_time_until_spawn value = -30}}
			if={limit={check_variable={which=SL_06_time_until_spawn value > 0}} change_variable={which=SL_06_time_until_spawn value = -30}}
			if={limit={check_variable={which=SL_07_time_until_spawn value > 0}} change_variable={which=SL_07_time_until_spawn value = -30}}
			if={limit={check_variable={which=SL_08_time_until_spawn value > 0}} change_variable={which=SL_08_time_until_spawn value = -30}}
			if={limit={check_variable={which=SL_09_time_until_spawn value > 0}} change_variable={which=SL_09_time_until_spawn value = -30}}
			if={limit={check_variable={which=SL_10_time_until_spawn value > 0}} change_variable={which=SL_10_time_until_spawn value = -30}}
		}
	}			
}

#Supply fleet spawn
#this: supply consumer
#Triggered from SGM_SL_event.1
fleet_event = {
    id = SGM_SL_event.11
    hide_window = yes
    is_triggered_only = yes	

	immediate = {
		#log="Spawning supply fleet for [This.GetName]-[Owner.GetName]"
				
		#NOTE: event_targets persist over one entire event call chain.
		#The termination of an event, does not delete an event_target!
		#Thus it is a really bad idea to check "exists = event_target:XYZ" in an event
		#that is called several times during the same event chain as it can lead to
		#confusing results, because event_target persisted from previous calls...
		
		#Determine home planet
		switch = {
			trigger = has_fleet_flag
			#MARKER:SUPPLY_LINE_NUMBER
			SL_01_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_01_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #else={log="[This.GetName]-[Prev.GetName] has too many supply fleets" }  #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_01_base"
			SL_02_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_02_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_02_base"
			SL_03_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_03_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_03_base"
			SL_04_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_04_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_04_base"
			SL_05_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_05_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_05_base"
			SL_06_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_06_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_06_base"
			SL_07_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_07_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_07_base"
			SL_08_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_08_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_08_base"
			SL_09_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_09_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_09_base"
			SL_10_consumer={owner={random_controlled_planet={limit={has_spaceport = yes has_planet_flag = SL_10_base} save_event_target_as = SL_home_planet prevprev={set_fleet_flag=SL_fixed_base }}}} #log="Spawn: [prevprev.GetName]@[This.GetName] fixed SL_10_base"
			default={} #default case is NOT executed, confirmed via log="" testing!
		}
									
		#If there is no home base, we determine the closest space port as home base.		
		if={limit={NOT={has_fleet_flag=SL_fixed_base}}
			#log="[This.GetName]-[Owner.GetName] uses automatic base determination"
			owner={capital_scope={save_event_target_as = SL_home_planet}}
			closest_system={
				limit={any_planet={exists = controller controller = { is_same_value = event_target:SL_country }	has_spaceport = yes}} #log="Return: [Root.GetName] auto close system [This.GetName]" #save_event_target_as = SL_home_system
				random_system_planet={
					limit={exists = controller controller={is_same_value = event_target:SL_country}	has_spaceport = yes} #log="Return: [Root.GetName] auto close planet [This.GetName]"
					save_event_target_as = SL_home_planet
				}
			}
		else={
			#log="[This.GetName]-[Owner.GetName] uses a fixed base"
			remove_fleet_flag=SL_fixed_base
		}}		

		#Finally we can create the supply fleet
		create_fleet = {
			settings = { spawn_debris = no }
			effect = {
				set_owner = event_target:SL_corps
				create_ship = {name = random random_existing_design = "SGM_scout" effect={set_ship_flag=SL_ship}}
				create_ship = {name = random random_existing_design = "SGM_light_transport" effect={set_ship_flag=SL_ship}}				
				
				# create_ship = {name = random random_existing_design = "SGM_scout" effect={set_ship_flag=SL_ship}}
				# create_ship = {name = random random_existing_design = "SGM_corvette" effect={set_ship_flag=SL_ship}}
				# create_ship = {name = random random_existing_design = "SGM_light_transport" effect={set_ship_flag=SL_ship}}
				# create_ship = {name = random random_existing_design = "SGM_destroyer" effect={set_ship_flag=SL_ship}}
				# create_ship = {name = random random_existing_design = "SGM_crew_transport" effect={set_ship_flag=SL_ship}}
				# create_ship = {name = random random_existing_design = "SGM_cargo_transport" effect={set_ship_flag=SL_ship}}
				# create_ship = {name = random random_existing_design = "SGM_tanker" effect={set_ship_flag=SL_ship}}				
				# create_ship = {name = random random_existing_design = "SGM_cruiser" effect={set_ship_flag=SL_ship}}
				# create_ship = {name = random random_existing_design = "SGM_battleship" effect={set_ship_flag=SL_ship}}
				
				set_location = {target = event_target:SL_home_planet distance = 10 angle = random}
				set_fleet_stance = passive
				set_formation_scale = 2				
				set_variable={which=SL_delay_traj_calc value=0}				
				add_modifier={modifier=SL_supply_ship_modifier days=-1}
				set_fleet_flag = SL_status_tracking_consumer
				#set_location = event_target:SL_home_planet
			}
		}
		
		#Set supply line ID
		switch={
			trigger = has_fleet_flag
			#MARKER:SUPPLY_LINE_NUMBER
			SL_01_consumer = { last_created_fleet={set_name = "Supply Line (1)"  set_fleet_flag = SL_01 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_01_fleet_count value=1} change_variable={which=SL_01_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 1"
			SL_02_consumer = { last_created_fleet={set_name = "Supply Line (2)"  set_fleet_flag = SL_02 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_02_fleet_count value=1} change_variable={which=SL_02_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 2"
			SL_03_consumer = { last_created_fleet={set_name = "Supply Line (3)"  set_fleet_flag = SL_03 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_03_fleet_count value=1} change_variable={which=SL_03_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 3"
			SL_04_consumer = { last_created_fleet={set_name = "Supply Line (4)"  set_fleet_flag = SL_04 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_04_fleet_count value=1} change_variable={which=SL_04_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 4"
			SL_05_consumer = { last_created_fleet={set_name = "Supply Line (5)"  set_fleet_flag = SL_05 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_05_fleet_count value=1} change_variable={which=SL_05_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 5"
			SL_06_consumer = { last_created_fleet={set_name = "Supply Line (6)"  set_fleet_flag = SL_06 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_06_fleet_count value=1} change_variable={which=SL_06_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 6"
			SL_07_consumer = { last_created_fleet={set_name = "Supply Line (7)"  set_fleet_flag = SL_07 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_07_fleet_count value=1} change_variable={which=SL_07_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 7"
			SL_08_consumer = { last_created_fleet={set_name = "Supply Line (8)"  set_fleet_flag = SL_08 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_08_fleet_count value=1} change_variable={which=SL_08_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 8"
			SL_09_consumer = { last_created_fleet={set_name = "Supply Line (9)"  set_fleet_flag = SL_09 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_09_fleet_count value=1} change_variable={which=SL_09_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 9" 
			SL_10_consumer = { last_created_fleet={set_name = "Supply Line (10)" set_fleet_flag = SL_10 set_fleet_flag = SL_fleet } event_target:SL_corps={change_variable={which=SL_10_fleet_count value=1} change_variable={which=SL_10_time_until_spawn value=@SL_SPAWN_BASE_INTERVAL}}} #log="[This.GetName]-[Owner.GetName] has ID 10"
			default = { }
		}		
	
		#Add some ships for flavor...
		if={limit={fleet_size > 10}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_scout" effect={set_ship_flag=SL_ship}}
				create_ship = {name = random random_existing_design = "SGM_scout" effect={set_ship_flag=SL_ship}}
			}
		}
		if={limit={fleet_size > 25}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_corvette" effect={set_ship_flag=SL_ship}}
				create_ship = {name = random random_existing_design = "SGM_light_transport" effect={set_ship_flag=SL_ship}}
			}
		}
		if={limit={fleet_size > 50}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_corvette" effect={set_ship_flag=SL_ship}}
				create_ship = {name = random random_existing_design = "SGM_crew_transport" effect={set_ship_flag=SL_ship}}			
			}
		}
		if={limit={fleet_size > 75}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_destroyer" effect={set_ship_flag=SL_ship}}
				create_ship = {name = random random_existing_design = "SGM_light_transport" effect={set_ship_flag=SL_ship}}				
			}
		}
		if={limit={fleet_size > 100}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_destroyer" effect={set_ship_flag=SL_ship}}
				create_ship = {name = random random_existing_design = "SGM_cargo_transport" effect={set_ship_flag=SL_ship}}			
			}
		}
		if={limit={fleet_size > 125}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_cruiser" effect={set_ship_flag=SL_ship}}		
				create_ship = {name = random random_existing_design = "SGM_tanker" effect={set_ship_flag=SL_ship}}				
			}
		}				
		if={limit={fleet_size > 150}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_cruiser" effect={set_ship_flag=SL_ship}}			
			}
		}
		if={limit={fleet_size > 175}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_battleship" effect={set_ship_flag=SL_ship}}
			}
		}
		if={limit={fleet_size > 225}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_battleship" effect={set_ship_flag=SL_ship}}
			}
		}
		if={limit={fleet_size > 275}
			last_created_fleet={
				create_ship = {name = random random_existing_design = "SGM_battleship" effect={set_ship_flag=SL_ship}}
			}
		}
		
		# create_ship_design = {
			# design = "Transport T1"
			# ftl = event_target:SL_country
		# }
	}
}

#Reduce count of active supply fleets
#This: supply fleet
fleet_event={
	id = SGM_SL_event.70
	hide_window = yes
	is_triggered_only = yes
	
	trigger={
		has_fleet_flag=SL_fleet
		owner={has_country_flag=SL_fleet_count_initialized}
	}
	
	immediate={
		#log="SGM_SL_event.70 [Owner.GetName]-[This.GetName] triggered destroy event"
		switch={
			trigger = has_fleet_flag
			#MARKER:SUPPLY_LINE_NUMBER
			SL_01 = {if={limit={owner={check_variable={which=SL_01_fleet_count value > 0}}} owner={change_variable={which=SL_01_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}
			SL_02 = {if={limit={owner={check_variable={which=SL_02_fleet_count value > 0}}} owner={change_variable={which=SL_02_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}
			SL_03 = {if={limit={owner={check_variable={which=SL_03_fleet_count value > 0}}} owner={change_variable={which=SL_03_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}
			SL_04 = {if={limit={owner={check_variable={which=SL_04_fleet_count value > 0}}} owner={change_variable={which=SL_04_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}
			SL_05 = {if={limit={owner={check_variable={which=SL_05_fleet_count value > 0}}} owner={change_variable={which=SL_05_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}
			SL_06 = {if={limit={owner={check_variable={which=SL_06_fleet_count value > 0}}} owner={change_variable={which=SL_06_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}
			SL_07 = {if={limit={owner={check_variable={which=SL_07_fleet_count value > 0}}} owner={change_variable={which=SL_07_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}
			SL_08 = {if={limit={owner={check_variable={which=SL_08_fleet_count value > 0}}} owner={change_variable={which=SL_08_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}
			SL_09 = {if={limit={owner={check_variable={which=SL_09_fleet_count value > 0}}} owner={change_variable={which=SL_09_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}
			SL_10 = {if={limit={owner={check_variable={which=SL_10_fleet_count value > 0}}} owner={change_variable={which=SL_10_fleet_count value = -1}} else ={log="ERROR disband fleet: [Owner.GetName]-[This.GetName] has invalid fleet count!"}}}				
		}
	}
}



# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
# on_fleet_destroyed_victim
event = {
	id = SGM_SL_event.71
	hide_window = yes
	is_triggered_only = yes	
	immediate={
		#log="on_fleet_destroyed_victim [This.GetName]-[FromFrom.GetName] was destroyed by [From.GetName]-[FromFromFrom.GetName]"
		FromFrom={fleet_event={id=SGM_SL_event.70}}
	}
}

# This = owner of fleet
# From = disbanded fleet
# on_fleet_disbanded
event = {
	id = SGM_SL_event.72
	hide_window = yes
	is_triggered_only = yes
	immediate={From={fleet_event={id=SGM_SL_event.70}}}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
# on_ship_destroyed_victim
event = {
	id = SGM_SL_event.73
	hide_window = yes
	is_triggered_only = yes
	
	trigger={
		FromFrom={has_ship_flag=SL_ship}
	}
		
	immediate = {
		log="on_ship_destroyed_victim [This.GetName]-[FromFrom.GetName] was destroyed by [From.GetName]-[FromFromFrom.GetName]"
		#print_scope_effect=yes
		SGM_corps2country=yes
		FromFrom={
			fleet={
				switch={
					trigger = has_fleet_flag
					#MARKER:SUPPLY_LINE_NUMBER
					SL_01 = {root={change_variable={which=SL_01_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
					SL_02 = {root={change_variable={which=SL_02_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
					SL_03 = {root={change_variable={which=SL_03_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
					SL_04 = {root={change_variable={which=SL_04_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
					SL_05 = {root={change_variable={which=SL_05_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
					SL_06 = {root={change_variable={which=SL_06_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
					SL_07 = {root={change_variable={which=SL_07_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
					SL_08 = {root={change_variable={which=SL_08_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
					SL_09 = {root={change_variable={which=SL_09_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
					SL_10 = {root={change_variable={which=SL_10_time_until_spawn value = @SL_DESTROYED_SHIP_PENALTY}}}
				}
			}
			switch={
				trigger=is_ship_size
				"SGM_scout"           = {event_target:SL_country={change_variable={which=SL_mineral_demand value = 10}}}
				"SGM_corvette"        = {event_target:SL_country={change_variable={which=SL_mineral_demand value = 20}}}
				"SGM_destroyer" 	  = {event_target:SL_country={change_variable={which=SL_mineral_demand value = 100}}}
				"SGM_cruiser"		  = {event_target:SL_country={change_variable={which=SL_mineral_demand value = 200}}}
				"SGM_battleship" 	  = {event_target:SL_country={change_variable={which=SL_mineral_demand value = 600}}}
				"SGM_light_transport" = {event_target:SL_country={change_variable={which=SL_mineral_demand value = 100}}}
				"SGM_crew_transport"  = {event_target:SL_country={change_variable={which=SL_mineral_demand value = 300}}}
				"SGM_cargo_transport" = {event_target:SL_country={change_variable={which=SL_mineral_demand value = 400}}}
				"SGM_tanker"		  = {event_target:SL_country={change_variable={which=SL_mineral_demand value = 500}}}
			}
		}		 
	}
}

#From = Planet scope
#This = Fleet scope
#on_fleet_enter_orbit
event = {
	id = SGM_SL_event.74
	hide_window = yes
	is_triggered_only = yes
	
	trigger={
		is_ship_class = shipclass_military
		from = {has_spaceport = yes}	
	}
		
	immediate = {
		owner={save_event_target_as=fleetOwner}
		from={controller={save_event_target_as=portController}}		
		if={limit={NOT={event_target:fleetOwner={is_hostile=event_target:portController}}}
			fleet_event={id=SGM_SL_event.5}
		}
	}
}